import sys

class op:
	def __init__(self, opcode, operands, switch=None, nnn000=None, argtypes=None):
		self.opcode = opcode
		self.operands = operands
		self.switch = switch
		self.nnn000 = nnn000
		self.argtypes = argtypes

	def toString(self, name, method):
		field = "\"%s\":" % (name)
		text = "%s%-10s" % (12 * ' ', field)
		text += "Interpretive("
		field = "\"%s\"," % (method)
		text += "%-17s" % (field)
		field = "\"%s\"," % (name)
		text += "%-12s" % (field)
		text += "%04o, " % (self.opcode)
		text += "%01d" % (self.operands)
		if self.switch == None:
			text += "),"
		else:
			text += ",  %01d" % self.switch
			if self.nnn000 == None:
				text += "),"
			else:
				text += ",  %06o" % self.nnn000
				text += "),"
		return text
	
opcodes = {
	"ABS":  	op(0130,    0), 
    "ABVAL":    op(0130, 	0), 
    "ARCCOS":	op(0050, 	0), 
    "ACOS":     op(0050, 	0), 
    "ARCSIN":   op(0040, 	0), 
    "ASIN":     op(0040, 	0), 
    "AXC,1":    op(0016, 	1), 
    "AXC,2":    op(0012, 	1), 
    "AXT,1":    op(0006, 	1), 
    "AXT,2":    op(0002, 	1), 
    "BDDV":     op(0111, 	1, 			0, 		000000, ( 1, 0 )), 
    "BDDV*":    op(0113, 	1, 			0, 		000000, ( 1, 0 )), 
    "BDSU":     op(0155, 	1, 			0, 		000000, ( 1, 0 )), 
    "BDSU*":    op(0157, 	1, 			0, 		000000, ( 1, 0 )), 
    "BHIZ":     op(0146, 	1), 
    "BMN":      op(0136, 	1), 
    "BOFCLR":   op(0162, 	2, 			1, 		000241), 
    "BOF":      op(0162, 	2, 			1, 		000341), 
    "BOFF":     op(0162, 	2, 			1, 		000341), 
    "BOFINV":   op(0162, 	2, 			1, 		000141), 
    "BOFSET":   op(0162, 	2, 			1, 		000041), 
    "BON":      op(0162, 	2, 			1, 		000301), 
    "BONCLR":   op(0162, 	2, 			1, 		000201), 
    "BONINV":   op(0162, 	2, 			1, 		000101), 
    "BONSET":   op(0162, 	2, 			1, 		000001), 
    "BOV":      op(0176, 	1), 
    "BOVB":     op(0172, 	1), 
    "BPL":      op(0132, 	1), 
    "BVSU":     op(0131, 	1, 			0, 		000000, ( 1, 0 )), 
    "BVSU*":    op(0133, 	1, 			0, 		000000, ( 1, 0 )), 
    "BZE":      op(0122, 	1), 
    "CALL":     op(0152, 	1), 
    "CALRB":    op(0152, 	1), 
    "CCALL":    op(0065, 	2, 			0, 		000000, ( 1, 0 )), 
    "CCALL*":   op(0067, 	2, 			0, 		000000, ( 1, 0 )), 
    "CGOTO":    op(0021, 	2, 			0, 		000000, ( 1, 0 )), 
    "CGOTO*":   op(0023, 	2, 			0, 		000000, ( 1, 0 )), 
    "CLEAR":    op(0162, 	1, 			1, 		000261), 
    "CLR":      op(0162, 	1, 			1, 		000261), 
    "CLRGO":    op(0162, 	2, 			1, 		000221), 
    "COS":      op(0030, 	0), 
    "COSINE":   op(0030, 	0), 
    "DAD":      op(0161, 	1, 			0, 		000000, ( 1, 0 )), 
    "DAD*":     op(0163, 	1, 			0, 		000000, ( 1, 0 )), 
    "DCOMP":    op(0100, 	0), 
    "DDV":      op(0105, 	1, 			0, 		000000, ( 1, 0 )), 
    "DDV*":     op(0107, 	1, 			0, 		000000, ( 1, 0 )), 
    "DLOAD":    op(0031, 	1, 			0, 		000000, ( 1, 0 )), 
    "DLOAD*":   op(0033, 	1, 			0, 		000000, ( 1, 0 )), 
    "DMP":      op(0171, 	1, 			0, 		000000, ( 1, 0 )), 
    "DMP*":     op(0173, 	1, 			0, 		000000, ( 1, 0 )), 
    "DMPR":     op(0101, 	1, 			0, 		000000, ( 1, 0 )), 
    "DMPR*":    op(0103, 	1, 			0, 		000000, ( 1, 0 )), 
    "DOT":      op(0135, 	1, 			0, 		000000, ( 1, 0 )), 
    "DOT*":     op(0137, 	1, 			0, 		000000, ( 1, 0 )), 
    "DSQ":      op(0060, 	0), 
    "DSU":      op(0151, 	1, 			0, 		000000, ( 1, 0 )), 
    "DSU*":     op(0153, 	1, 			0, 		000000, ( 1, 0 )), 
    "EXIT":     op(0000, 	0), 
    "GOTO":     op(0126, 	1), 
    "INCR,1":   op(0066, 	1), 
    "INCR,2":   op(0062, 	1), 
    "INVERT":   op(0162, 	1, 			1, 		000161), 
    "INVGO":    op(0162, 	2, 			1, 		000121), 
    "ITA":      op(0156, 	1), 
    "LXA,1":    op(0026, 	1), 
    "LXA,2":    op(0022, 	1), 
    "LXC,1":    op(0036, 	1), 
    "LXC,2":    op(0032, 	1), 
    "MXV":      op(0055, 	1, 			0, 		000000, ( 1, 0 )), 
    "MXV*":     op(0057, 	1, 			0, 		000000, ( 1, 0 )), 
    "NORM":     op(0075, 	1, 			0, 		000000, ( 1, 0 )), 
    "NORM*":    op(0077, 	1, 			0, 		000000, ( 1, 0 )), 
    "PDDL":     op(0051, 	1, 			0, 		000000, ( 1, 0 )), 
    "PDDL*":    op(0053, 	1, 			0, 		000000, ( 1, 0 )), 
    "PDVL":     op(0061, 	1, 			0, 		000000, ( 1, 0 )), 
    "PDVL*":    op(0063, 	1, 			0, 		000000, ( 1, 0 )), 
    "PUSH":     op(0170, 	0), 
    "ROUND":    op(0070, 	0), 
    "RTB":      op(0142, 	1), 
    "RVQ":      op(0160, 	0), 
    "SET":      op(0162, 	1, 			1, 		000061), 
    "SETGO":    op(0162, 	2, 			1, 		000021), 
    "SETPD":    op(0175, 	1, 			0, 		000000, ( 1, 0 )), 
    "SIGN":     op(0011, 	1, 			0, 		000000, ( 1, 0 )), 
    "SIGN*":    op(0013, 	1, 			0, 		000000, ( 1, 0 )), 
    "SIN":      op(0020, 	0), 
    "SINE":     op(0020, 	0), 
    "SL":       op(0115, 	1, 			2, 		020202, ( 1, 0 )), 
    "SL*":      op(0117, 	1, 			2, 		020202, ( 1, 0 )), 
    "SLOAD":    op(0041, 	1, 			0, 		000000, ( 1, 0 )), 
    "SLOAD*":   op(0043, 	1, 			0, 		000000, ( 1, 0 )), 
    "SL1":      op(0024, 	0, 			0, 		000000, ( 1, 0 )), 
    "SL1R":     op(0004, 	0, 			0, 		000000, ( 1, 0 )), 
    "SL2":      op(0064, 	0, 			0, 		000000, ( 1, 0 )), 
    "SL2R":     op(0044, 	0, 			0, 		000000, ( 1, 0 )), 
    "SL3":      op(0124, 	0, 			0, 		000000, ( 1, 0 )), 
    "SL3R":     op(0104, 	0, 			0, 		000000, ( 1, 0 )), 
    "SL4":      op(0164, 	0, 			0, 		000000, ( 1, 0 )), 
    "SL4R":     op(0144, 	0, 			0, 		000000, ( 1, 0 )), 
    "SLR":      op(0115, 	1, 			2, 		021202, ( 1, 0 )), 
    "SLR*":     op(0117, 	1, 			2, 		021202, ( 1, 0 )), 
    "SQRT":     op(0010, 	0), 
    "SR":       op(0115, 	1, 			2, 		020602, ( 1, 0 )), 
    "SR*":      op(0117, 	1, 			2, 		020602, ( 1, 0 )), 
    "SR1":      op(0034, 	0, 			0, 		000000, ( 1, 0 )), 
    "SR1R":     op(0014, 	0, 			0, 		000000, ( 1, 0 )), 
    "SR2":      op(0074, 	0, 			0, 		000000, ( 1, 0 )), 
    "SR2R":     op(0054, 	0, 			0, 		000000, ( 1, 0 )), 
    "SR3":      op(0134, 	0, 			0, 		000000, ( 1, 0 )), 
    "SR3R":     op(0114, 	0, 			0, 		000000, ( 1, 0 )), 
    "SR4":      op(0174, 	0, 			0, 		000000, ( 1, 0 )), 
    "SR4R":     op(0154, 	0, 			0, 		000000, ( 1, 0 )), 
    "SRR":      op(0115, 	1, 			2, 		021602, ( 1, 0 )), 
    "SRR*":     op(0117, 	1, 			2, 		021602, ( 1, 0 )), 
    "SSP":      op(0045, 	2, 			0, 		000000, ( 1, 0 )), 
    "SSP*":     op(0047, 	1, 			0, 		000000, ( 1, 0 )), 
    "STADR":    op(0150, 	0), 
    "STQ":      op(0156, 	1), 
    "SXA,1":    op(0046, 	1), 
    "SXA,2":    op(0042, 	1), 
    "TAD":      op(0005, 	1, 			0, 		000000, ( 1, 0 )), 
    "TAD*":     op(0007, 	1, 			0, 		000000, ( 1, 0 )), 
    "TIX,1":    op(0076, 	1), 
    "TIX,2":    op(0072, 	1), 
    "TLOAD":    op(0025, 	1, 			0, 		000000, ( 1, 0 )), 
    "TLOAD*":   op(0027, 	1, 			0, 		000000, ( 1, 0 )), 
    "UNIT":     op(0120, 	0), 
    "V/SC":     op(0035, 	1, 			0, 		000000, ( 1, 0 )), 
    "V/SC*":    op(0037, 	1, 			0, 		000000, ( 1, 0 )), 
    "VAD":      op(0121, 	1, 			0, 		000000, ( 1, 0 )), 
    "VAD*":     op(0123, 	1, 			0, 		000000, ( 1, 0 )), 
    "VCOMP":    op(0100, 	0), 
    "VDEF":     op(0110, 	0), 
    "VLOAD":    op(0001, 	1, 			0, 		000000, ( 1, 0 )), 
    "VLOAD*":   op(0003, 	1, 			0, 		000000, ( 1, 0 )), 
    "VPROJ":    op(0145, 	1, 			0, 		000000, ( 1, 0 )), 
    "VPROJ*":   op(0147, 	1, 			0, 		000000, ( 1, 0 )), 
    "VSL":      op(0115, 	1, 			2, 		020202, ( 1, 0 )), 
    "VSL*":     op(0117, 	1, 			2, 		020202, ( 1, 0 )), 
    "VSL1":     op(0004, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSL2":     op(0024, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSL3":     op(0044, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSL4":     op(0064, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSL5":     op(0104, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSL6":     op(0124, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSL7":     op(0144, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSL8":     op(0164, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSQ":      op(0140, 	0), 
    "VSR":      op(0115, 	1, 			2, 		020602, ( 1, 0 )), 
    "VSR*":     op(0117, 	1, 			2, 		020602, ( 1, 0 )), 
    "VSR1":     op(0014, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSR2":     op(0034, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSR3":     op(0054, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSR4":     op(0074, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSR5":     op(0114, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSR6":     op(0134, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSR7":     op(0154, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSR8":     op(0174, 	0, 			0, 		000000, ( 1, 0 )), 
    "VSU":      op(0125, 	1, 			0, 		000000, ( 1, 0 )), 
    "VSU*":     op(0127, 	1, 			0, 		000000, ( 1, 0 )), 
    "VXM":      op(0071, 	1, 			0, 		000000, ( 1, 0 )), 
    "VXM*":     op(0073, 	1, 			0, 		000000, ( 1, 0 )), 
    "VXSC":     op(0015, 	1, 			0, 		000000, ( 1, 0 )), 
    "VXSC*":    op(0017, 	1, 			0, 		000000, ( 1, 0 )), 
    "VXV":      op(0141, 	1, 			0, 		000000, ( 1, 0 )), 
    "VXV*":     op(0143, 	1, 			0, 		000000, ( 1, 0 )), 
    "XAD,1":    op(0106, 	1), 
    "XAD,2":    op(0102, 	1), 
    "XCHX,1":   op(0056, 	1), 
    "XCHX,2":   op(0052, 	1), 
    "XSU,1":    op(0116, 	1), 
    "XSU,2":    op(0112, 	1) 
}

origfile = open("opcodes.py", 'r')
origlines = []
for line in origfile.readlines():
	if "Interpretive(" in line:
		origlines.append(line.strip())

origdata = {}
for line in origlines:
	fields = line.split(':')
	name = fields[0].strip('"')
	value = fields[1].strip().rstrip(',').split('(')[1].split(')')[0]
	value = value.split()
	for i in range(len(value)):
		value[i] = value[i].rstrip(',').strip('"')
	origdata[name] = value

keys = origdata.keys()
keys.sort()

for name in keys:
	if name in opcodes:
		newop = opcodes[name]
		method = origdata[name][0]
		print newop.toString(name, method)

		